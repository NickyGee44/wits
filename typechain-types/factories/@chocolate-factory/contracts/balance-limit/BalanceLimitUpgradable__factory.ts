/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BalanceLimitUpgradable,
  BalanceLimitUpgradableInterface,
} from "../../../../@chocolate-factory/contracts/balance-limit/BalanceLimitUpgradable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "stageId_",
        type: "uint8",
      },
    ],
    name: "balanceLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "stageId_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "currentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "stageId_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "remainingBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enable_",
        type: "bool",
      },
    ],
    name: "setAdminPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "stageId_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "limit_",
        type: "uint256",
      },
    ],
    name: "updateBalanceLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506103cd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063240ff27f1461006757806324d7806c1461007c5780636dba1163146100bd578063b1ba72d6146100de578063c519cd1c14610101578063e4ab4bb914610114575b600080fd5b61007a610075366004610296565b610152565b005b6100a861008a3660046102d2565b6001600160a01b031660009081526001602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6100d06100cb3660046102fe565b6101d0565b6040519081526020016100b4565b6100d06100ec366004610331565b60ff1660009081526033602052604090205490565b61007a61010f36600461034c565b610216565b6100d06101223660046102fe565b60ff821660009081526033602090815260408083206001600160a01b038516845260010190915290205492915050565b3360009081526001602052604090205460ff166101a55760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71030b236b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b03919091166000908152600160205260409020805460ff1916911515919091179055565b60ff821660008181526033602081815260408084206001600160a01b03871685526001810183529084205494845291905254909161020d91610376565b90505b92915050565b3360009081526001602052604090205460ff166102645760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71030b236b4b760a11b604482015260640161019c565b60ff909116600090815260336020526040902055565b80356001600160a01b038116811461029157600080fd5b919050565b600080604083850312156102a957600080fd5b6102b28361027a565b9150602083013580151581146102c757600080fd5b809150509250929050565b6000602082840312156102e457600080fd5b61020d8261027a565b803560ff8116811461029157600080fd5b6000806040838503121561031157600080fd5b61031a836102ed565b91506103286020840161027a565b90509250929050565b60006020828403121561034357600080fd5b61020d826102ed565b6000806040838503121561035f57600080fd5b610368836102ed565b946020939093013593505050565b8181038181111561021057634e487b7160e01b600052601160045260246000fdfea2646970667358221220e0667c627cf3170dbe509c62086e158518482dd94e4e48c35adbdf7a31bd279864736f6c63430008110033";

type BalanceLimitUpgradableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BalanceLimitUpgradableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BalanceLimitUpgradable__factory extends ContractFactory {
  constructor(...args: BalanceLimitUpgradableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BalanceLimitUpgradable> {
    return super.deploy(overrides || {}) as Promise<BalanceLimitUpgradable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BalanceLimitUpgradable {
    return super.attach(address) as BalanceLimitUpgradable;
  }
  override connect(signer: Signer): BalanceLimitUpgradable__factory {
    return super.connect(signer) as BalanceLimitUpgradable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BalanceLimitUpgradableInterface {
    return new utils.Interface(_abi) as BalanceLimitUpgradableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BalanceLimitUpgradable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BalanceLimitUpgradable;
  }
}
