/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  AdminManager,
  AdminManagerInterface,
} from "../../../../../contracts/src/contracts/chocolate-factory/AdminManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enable_",
        type: "bool",
      },
    ],
    name: "setAdminPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000908152602081905260408082208054600160ff19918216811790925530845291832080549092161790556101bd90819061004e90396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063240ff27f1461003b57806324d7806c14610050575b600080fd5b61004e610049366004610129565b610090565b005b61007c61005e366004610165565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b3360009081526020819052604090205460ff166100e25760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71030b236b4b760a11b604482015260640160405180910390fd5b6001600160a01b03919091166000908152602081905260409020805460ff1916911515919091179055565b80356001600160a01b038116811461012457600080fd5b919050565b6000806040838503121561013c57600080fd5b6101458361010d565b91506020830135801515811461015a57600080fd5b809150509250929050565b60006020828403121561017757600080fd5b6101808261010d565b939250505056fea2646970667358221220e9cb64afe4d550fbba7ff27e87d60cda5ccb67439f4eff8235da77c163192ea864736f6c63430008110033";

type AdminManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdminManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AdminManager__factory extends ContractFactory {
  constructor(...args: AdminManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AdminManager> {
    return super.deploy(overrides || {}) as Promise<AdminManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AdminManager {
    return super.attach(address) as AdminManager;
  }
  override connect(signer: Signer): AdminManager__factory {
    return super.connect(signer) as AdminManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdminManagerInterface {
    return new utils.Interface(_abi) as AdminManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AdminManager {
    return new Contract(address, _abi, signerOrProvider) as AdminManager;
  }
}
