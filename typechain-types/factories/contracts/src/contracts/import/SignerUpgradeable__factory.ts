/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SignerUpgradeable,
  SignerUpgradeableInterface,
} from "../../../../../contracts/src/contracts/import/SignerUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "EIP712DomainChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "eip712Domain",
    outputs: [
      {
        internalType: "bytes1",
        name: "fields",
        type: "bytes1",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "salt",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "extensions",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account_",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enable_",
        type: "bool",
      },
    ],
    name: "setAdminPermissions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "signer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610470806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063238ac93314610051578063240ff27f1461008157806324d7806c1461009657806384b0196e146100d2575b600080fd5b606754610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61009461008f3660046102c6565b6100ed565b005b6100c26100a4366004610302565b6001600160a01b031660009081526035602052604090205460ff1690565b6040519015158152602001610078565b6100da61016b565b604051610078979695949392919061036a565b3360009081526035602052604090205460ff166101405760405162461bcd60e51b815260206004820152600c60248201526b2737ba1030b71030b236b4b760a11b60448201526064015b60405180910390fd5b6001600160a01b03919091166000908152603560205260409020805460ff1916911515919091179055565b6000606080600080600060606001546000801b14801561018b5750600254155b6101cf5760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b6044820152606401610137565b6101d7610209565b6101df61029b565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606003805461021890610400565b80601f016020809104026020016040519081016040528092919081815260200182805461024490610400565b80156102915780601f1061026657610100808354040283529160200191610291565b820191906000526020600020905b81548152906001019060200180831161027457829003601f168201915b5050505050905090565b60606004805461021890610400565b80356001600160a01b03811681146102c157600080fd5b919050565b600080604083850312156102d957600080fd5b6102e2836102aa565b9150602083013580151581146102f757600080fd5b809150509250929050565b60006020828403121561031457600080fd5b61031d826102aa565b9392505050565b6000815180845260005b8181101561034a5760208185018101518683018201520161032e565b506000602082860101526020601f19601f83011685010191505092915050565b60ff60f81b881681526000602060e08184015261038a60e084018a610324565b838103604085015261039c818a610324565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b818110156103ee578351835292840192918401916001016103d2565b50909c9b505050505050505050505050565b600181811c9082168061041457607f821691505b60208210810361043457634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220b929355cca5be81daabfe1473d50390f1dfc9d611a66814216c5dc19883349cf64736f6c63430008110033";

type SignerUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignerUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignerUpgradeable__factory extends ContractFactory {
  constructor(...args: SignerUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SignerUpgradeable> {
    return super.deploy(overrides || {}) as Promise<SignerUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignerUpgradeable {
    return super.attach(address) as SignerUpgradeable;
  }
  override connect(signer: Signer): SignerUpgradeable__factory {
    return super.connect(signer) as SignerUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignerUpgradeableInterface {
    return new utils.Interface(_abi) as SignerUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignerUpgradeable {
    return new Contract(address, _abi, signerOrProvider) as SignerUpgradeable;
  }
}
